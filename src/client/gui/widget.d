// Written in D programming language
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
/**
*	Base widget for other gui elements.
*	It is port of C++ libtcod-gui library.
*
*	Authors: Gushcha Anton, Jice & Mingos
*	License: Boost v1.0
*/
module gui.widget;

import derelict.tcod.libtcod;
import std.container;
import std.bitmanip;

alias void delegate(Widget w) widgetCallback;

class Widget
{
	public
	{
		int x,y,w,h;
		static Widget focus;
		static Widget keyboardFocus;
		static TCOD_mouse_t mouse;
		static TCOD_color_t fore;

		this()
		{
			mouseIn = false;
			mouseL 	= false;
			visible = true;

			widgets.insert(this);
		}

		this(int x, int y)
		{
			this.x = x;
			this.y = y;
			this();
		}

		this(int x, int y, int w, int h)
		{
			this.w = w;
			this.h = h;
			this(x, y);
		}

		void render()
		{

		}

		void update(const TCOD_key_t k)
		{
			bool curs = TCOD_mouse_is_cursor_visible() == 1;
			if (curs)
			{
				if (mouse.cx >= x && mouse.cx < x+w && mouse.cy >= y && mouse.cy < y+h)
				{
					if(!mouseIn)
					{
						mouseIn = true;
						onMouseIn();
					}
					if(focus != this)
					{
						focus = this;
					}
				} else
				{
					if (mouseIn)
					{
						mouseIn = false;
						onMouseOut();
					}
					mouseL = false;
					if (this == focus)
					{
						focus = null;
					}
				}
			}
			if (mouseIn || (!curs && this == focus))
			{
				if(mouse.lbutton && !mouseL)
				{
					mouseL = true;
					onButtonPress();
				} else if (!mouse.lbutton && mouseL)
				{
					onButtonRelease();
					keyboardFocus = null;
					if (mouseL) onButtonClick();
					mouseL = false;
				} else if (mouse.lbutton_pressed)
				{
					keyboardFocus = null;
					onButtonClick();
				}
			}
		}

		final void move(int x, int y)
		{
			this.x = x;
			this.y = y;
		}

		final void setTip(string tip)
		{
			this.tip = tip;
		}

		void setVisible(bool val)
		{
			visible = val;
		}

		final bool isVisible()
		{
			return visible;
		}

		void computeSize()
		{

		}

		static void backgroundColor(const TCOD_color_t col, const TCOD_color_t colFocus) @property
		{
			back = col;
			backFocus = colFocus;
		}

		static void foregroundColor(const TCOD_color_t col, const TCOD_color_t colFocus) @property
		{
			fore = col;
			foreFocus = colFocus;
		}

		static void console(TCOD_console_t con) @property
		{
			Widget.con = con;
		}

		static void updateWidgets(const TCOD_key_t k, const TCOD_mouse_t mouse)
		{
			Widget.mouse = mouse;
			updateWidgetsIntern(k);
		}

		static void renderWidgets()
		{
			foreach(w; widgets)
			{
				if (w.visible)
					w.render();
			}
		}

		void expand(int width, int height) 
		{

		}

		void addOnMouseInCallback(widgetCallback func)
		{
			onMouseInCallbacks.insert(func);
		}

		void addOnMouseOutCallback(widgetCallback func)
		{
			onMouseOutCallbacks.insert(func);
		}

		void addButtonPressCallbacks(widgetCallback func)
		{
			onButtonPressCallbacks.insert(func);
		}

		void addButtonReleaseCallbacks(widgetCallback func)
		{
			onButtonReleaseCallbacks.insert(func);
		}

		void addOnButtonClickCallback(widgetCallback func)
		{
			onButtonClickCallbacks.insert(func);
		}		
	}
	protected
	{
		Array!widgetCallback onMouseInCallbacks;
		Array!widgetCallback onMouseOutCallbacks;
		Array!widgetCallback onButtonPressCallbacks;
		Array!widgetCallback onButtonReleaseCallbacks;
		Array!widgetCallback onButtonClickCallbacks;

		void onMouseIn()
		{
			foreach(func; onMouseInCallbacks)
			{
				func(this);
			}
		}

		void onMouseOut()
		{
			foreach(func; onMouseOutCallbacks)
			{
				func(this);
			}
		}

		void onButtonPress()
		{
			foreach(func; onButtonPressCallbacks)
			{
				func(this);
			}
		}

		void onButtonRelease()
		{
			foreach(func; onButtonReleaseCallbacks)
			{
				func(this);
			}
		}

		void onButtonClick()
		{
			foreach(func; onButtonClickCallbacks)
			{
				func(this);
			}
		}

		static void updateWidgetsIntern(const TCOD_key_t k)
		{
			elapsed = TCOD_sys_get_last_frame_length();
			foreach(w; widgets)
			{
				if (w.visible)
				{
					w.computeSize();
					w.update(k);
				}
			}
		}

		static float elapsed 			= 0.0f;
		static TCOD_color_t back 		= TCOD_color_t(40,40,120);
		static TCOD_color_t backFocus	= TCOD_color_t(220,220,180);
		static TCOD_color_t foreFocus	= TCOD_color_t(70,70,130);
		static TCOD_console_t con 		= null;
		static DList!Widget widgets;

		string tip;
	    mixin(bitfields!(
	        bool, "mouseIn",   	1,
	        bool, "mouseL",    	1,
	        bool, "visible",   	1,
	        bool, "", 			5));
	}
}