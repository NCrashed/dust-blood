// Written in D programming language
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
/**
*	Module handles user information, user registration and authorization.
*
*	Author: Gushcha Anton
*	License: Boost v1.0
*/
module user;

import util.serialization.serializer;
import util.log;
import util.common;
import std.file;
import std.path;
import std.datetime;
import std.net.isemail;
import std.digest.sha;

private enum DEFAULT_USERS_LOC = "../base/users";
private enum PASS_SALT_LENGTH = 5;
private alias GendocArchive DefaultArchive;

private User[string] allUsers;

static this()
{
	if(!exists(DEFAULT_USERS_LOC))
	{
		writeNoticeLog("Creating users dir");
		mkdirRecurse(DEFAULT_USERS_LOC);
	}
	allUsers = loadAllUsers();
}

/**
*	User information stored in file.
*/
public struct User
{
	string login;
	string name;
	string passhash;
	string salt;
	string email;

	struct HistoryEntry
	{
		string ip;
		string date;
	}
	HistoryEntry[] history;
}

/**
*	Executed when problem with registration detected.
*/
public class RegisterException : Exception
{
	this(string msg, string login, string email)
	{
		super(msg);
		this.login = login;
		this.email = email;
	}

	string login;
	string email;
}

public User registerUser(string login, string name, string passhash, string email)
{
	User user;
	if(login == "")
	{
		throw new RegisterException("User login invalid!", login, email);
	}
	if(login in allUsers)
	{
		throw new RegisterException("User "~login~" already exists!", login, email);
	}
	if(!isEmail(email))
	{
		throw new RegisterException("User email invalid!", login, email);
	}

	user.login = login;
	user.name = name;
	user.salt = getRandomString(PASS_SALT_LENGTH);
	user.passhash = toHexString(sha1Of(passhash~user.salt));
	user.email = email;

	try
	{
		serialize!DefaultArchive(user, "User", DEFAULT_USERS_LOC~dirSeparator~user.login~".user");
	} catch(Exception e)
	{
		throw new RegisterException("Internal error while saving user!", login, email);
	}

	allUsers[login] = user;
	return user;
}

/**
*	Loads all users in map by their logins from $(B DEFAULT_USERS_LOC).
*/
private User[string] loadAllUsers()
{
	auto uFiles = filter!`endsWith(a.name,".user")`(dirEntries(DEFAULT_USERS_LOC, SpanMode.depth));
	User[string] map;
	foreach(entry; uFiles)
	{
		User user;
		try user = deserialize!(DefaultArchive, User)(entry.name, "User");
		catch(Exception e)
		{
			writeWarningLog("Failed to load user file: "~entry.name);
		}

		if(user.login in map)
		{
			writeWarningLog("Detected users with equal logins! Conflict logins: "~user.login);
		} else
		{
			map[user.login] = user;
		}
	}
	return map;
}
